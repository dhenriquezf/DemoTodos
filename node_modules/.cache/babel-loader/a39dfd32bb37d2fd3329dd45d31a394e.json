{"ast":null,"code":"var _jsxFileName = \"/home/danielnote-linux/demotodo/src/App.js\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport { Display } from './Components/Display';\nimport { Calculator } from './Components/Calculator';\nimport { CalButton } from './Components/CalButton';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst numberButtons = ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9'];\nconst actionButtons = ['CE', 'C', '<-', '.', '-/+'];\nconst operationButtons = ['=', '-', '+', '/', '*', '%'];\n\nfunction App() {\n  _s();\n\n  const [displayState, setDisplayState] = React.useState('');\n\n  const showDisplay = button => {\n    if (button === 'CE' || button === 'C') {\n      setDisplayState('');\n    } else if (button === '<-') {\n      setDisplayState(displayState.substring(0, displayState.length - 1));\n    } else if (button === '=') {} else if (button === '+') {} else if (button === '-') {} else if (button === '/') {} else if (button === '*') {} else if (button === '%') {} else {\n      const lastStateDisplay = displayState;\n      setDisplayState(lastStateDisplay + button);\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(React.Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Display, {\n      displayState: displayState\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Calculator, {\n      children: [actionButtons.map(actionButton => /*#__PURE__*/_jsxDEV(CalButton, {\n        character: actionButton,\n        showDisplay: () => showDisplay(actionButton)\n      }, actionButton, false, {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 11\n      }, this)), numberButtons.map(numberButton => /*#__PURE__*/_jsxDEV(CalButton, {\n        character: numberButton,\n        showDisplay: () => showDisplay(numberButton)\n      }, numberButton, false, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 11\n      }, this)), operationButtons.map(operationButton => /*#__PURE__*/_jsxDEV(CalButton, {\n        character: operationButton,\n        showDisplay: () => showDisplay(operationButton)\n      }, operationButton, false, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 11\n      }, this))]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 39,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"mT7Jt6Y/DQx6S66uFw3LV1aRFXA=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/home/danielnote-linux/demotodo/src/App.js"],"names":["React","Display","Calculator","CalButton","numberButtons","actionButtons","operationButtons","App","displayState","setDisplayState","useState","showDisplay","button","substring","length","lastStateDisplay","map","actionButton","numberButton","operationButton"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,OAAT,QAAwB,sBAAxB;AACA,SAASC,UAAT,QAA2B,yBAA3B;AACA,SAASC,SAAT,QAA0B,wBAA1B;;AAEA,MAAMC,aAAa,GAAG,CAAC,GAAD,EAAK,GAAL,EAAS,GAAT,EAAa,GAAb,EAAiB,GAAjB,EAAqB,GAArB,EAAyB,GAAzB,EAA6B,GAA7B,EAAiC,GAAjC,EAAqC,GAArC,CAAtB;AACA,MAAMC,aAAa,GAAG,CAAC,IAAD,EAAM,GAAN,EAAU,IAAV,EAAe,GAAf,EAAmB,KAAnB,CAAtB;AACA,MAAMC,gBAAgB,GAAG,CAAC,GAAD,EAAK,GAAL,EAAS,GAAT,EAAa,GAAb,EAAiB,GAAjB,EAAqB,GAArB,CAAzB;;AAEA,SAASC,GAAT,GAAe;AAAA;;AAEb,QAAM,CAACC,YAAD,EAAeC,eAAf,IAAkCT,KAAK,CAACU,QAAN,CAAe,EAAf,CAAxC;;AAEA,QAAMC,WAAW,GAAIC,MAAD,IAAY;AAC9B,QAAIA,MAAM,KAAK,IAAX,IAAmBA,MAAM,KAAK,GAAlC,EAAuC;AACrCH,MAAAA,eAAe,CAAC,EAAD,CAAf;AACD,KAFD,MAEO,IAAIG,MAAM,KAAK,IAAf,EAAqB;AAC1BH,MAAAA,eAAe,CAACD,YAAY,CAACK,SAAb,CAAuB,CAAvB,EAA0BL,YAAY,CAACM,MAAb,GAAsB,CAAhD,CAAD,CAAf;AACD,KAFM,MAEA,IAAIF,MAAM,KAAK,GAAf,EAAoB,CAE1B,CAFM,MAEA,IAAIA,MAAM,KAAK,GAAf,EAAoB,CAE1B,CAFM,MAEA,IAAIA,MAAM,KAAK,GAAf,EAAoB,CAE1B,CAFM,MAEA,IAAIA,MAAM,KAAK,GAAf,EAAoB,CAE1B,CAFM,MAEA,IAAIA,MAAM,KAAK,GAAf,EAAoB,CAE1B,CAFM,MAEA,IAAIA,MAAM,KAAK,GAAf,EAAoB,CAE1B,CAFM,MAEA;AACL,YAAMG,gBAAgB,GAAGP,YAAzB;AACAC,MAAAA,eAAe,CAACM,gBAAgB,GAAGH,MAApB,CAAf;AACD;AAEF,GAtBD;;AAwBA,sBACE,QAAC,KAAD,CAAO,QAAP;AAAA,4BACE,QAAC,OAAD;AACE,MAAA,YAAY,EAAEJ;AADhB;AAAA;AAAA;AAAA;AAAA,YADF,eAIE,QAAC,UAAD;AAAA,iBACGH,aAAa,CAACW,GAAd,CAAkBC,YAAY,iBAC7B,QAAC,SAAD;AAEE,QAAA,SAAS,EAAEA,YAFb;AAGE,QAAA,WAAW,EAAE,MAAMN,WAAW,CAACM,YAAD;AAHhC,SACOA,YADP;AAAA;AAAA;AAAA;AAAA,cADD,CADH,EAQGb,aAAa,CAACY,GAAd,CAAkBE,YAAY,iBAC7B,QAAC,SAAD;AAEE,QAAA,SAAS,EAAEA,YAFb;AAGE,QAAA,WAAW,EAAE,MAAMP,WAAW,CAACO,YAAD;AAHhC,SACOA,YADP;AAAA;AAAA;AAAA;AAAA,cADD,CARH,EAeGZ,gBAAgB,CAACU,GAAjB,CAAqBG,eAAe,iBACnC,QAAC,SAAD;AAEE,QAAA,SAAS,EAAEA,eAFb;AAGE,QAAA,WAAW,EAAE,MAAMR,WAAW,CAACQ,eAAD;AAHhC,SACOA,eADP;AAAA;AAAA;AAAA;AAAA,cADD,CAfH;AAAA;AAAA;AAAA;AAAA;AAAA,YAJF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AA8BD;;GA1DQZ,G;;KAAAA,G;AA4DT,eAAeA,GAAf","sourcesContent":["import React from 'react'\nimport { Display } from './Components/Display'\nimport { Calculator } from './Components/Calculator'\nimport { CalButton } from './Components/CalButton'\n\nconst numberButtons = ['0','1','2','3','4','5','6','7','8','9']\nconst actionButtons = ['CE','C','<-','.','-/+']\nconst operationButtons = ['=','-','+','/','*','%']\n\nfunction App() {\n\n  const [displayState, setDisplayState] = React.useState('')\n\n  const showDisplay = (button) => {\n    if (button === 'CE' || button === 'C') {\n      setDisplayState('')\n    } else if (button === '<-') {\n      setDisplayState(displayState.substring(0, displayState.length - 1))\n    } else if (button === '=') {\n\n    } else if (button === '+') {\n\n    } else if (button === '-') {\n\n    } else if (button === '/') {\n\n    } else if (button === '*') {\n\n    } else if (button === '%') {\n\n    } else {\n      const lastStateDisplay = displayState\n      setDisplayState(lastStateDisplay + button)\n    }\n    \n  }\n\n  return (\n    <React.Fragment>\n      <Display\n        displayState={displayState}\n      />\n      <Calculator>\n        {actionButtons.map(actionButton => (\n          <CalButton \n            key={actionButton} \n            character={actionButton}\n            showDisplay={() => showDisplay(actionButton)}\n          />\n        ))}\n        {numberButtons.map(numberButton => (\n          <CalButton \n            key={numberButton} \n            character={numberButton}\n            showDisplay={() => showDisplay(numberButton)}\n          />\n        ))}\n        {operationButtons.map(operationButton => (\n          <CalButton \n            key={operationButton} \n            character={operationButton}\n            showDisplay={() => showDisplay(operationButton)}\n          />\n        ))}\n      </Calculator>\n    </React.Fragment>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}