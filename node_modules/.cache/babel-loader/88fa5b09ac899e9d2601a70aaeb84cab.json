{"ast":null,"code":"var _jsxFileName = \"/home/danielnote-linux/demotodo/src/App.js\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport { Display } from './Components/Display';\nimport { Calculator } from './Components/Calculator';\nimport { CalButton } from './Components/CalButton';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst numberButtons = ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9'];\nconst actionButtons = ['CE', 'C', '<-', '.', '-/+'];\nconst operationButtons = ['=', '-', '+', '/', '*', '%'];\n\nfunction App() {\n  _s();\n\n  const [diplayState, setDisplayState] = React.useState();\n  return /*#__PURE__*/_jsxDEV(React.Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Display, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 16,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Calculator, {\n      children: [actionButtons.map(actionButton => /*#__PURE__*/_jsxDEV(CalButton, {\n        character: actionButton\n      }, actionButton, false, {\n        fileName: _jsxFileName,\n        lineNumber: 19,\n        columnNumber: 11\n      }, this)), numberButtons.map(numberButton => /*#__PURE__*/_jsxDEV(CalButton, {\n        character: numberButton\n      }, numberButton, false, {\n        fileName: _jsxFileName,\n        lineNumber: 22,\n        columnNumber: 11\n      }, this)), operationButtons.map(operationButton => /*#__PURE__*/_jsxDEV(CalButton, {\n        character: operationButton\n      }, operationButton, false, {\n        fileName: _jsxFileName,\n        lineNumber: 25,\n        columnNumber: 11\n      }, this))]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 17,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 15,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"IZrO78iv3xmPndMsSOe0cpxhnyw=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/home/danielnote-linux/demotodo/src/App.js"],"names":["React","Display","Calculator","CalButton","numberButtons","actionButtons","operationButtons","App","diplayState","setDisplayState","useState","map","actionButton","numberButton","operationButton"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,OAAT,QAAwB,sBAAxB;AACA,SAASC,UAAT,QAA2B,yBAA3B;AACA,SAASC,SAAT,QAA0B,wBAA1B;;AAEA,MAAMC,aAAa,GAAG,CAAC,GAAD,EAAK,GAAL,EAAS,GAAT,EAAa,GAAb,EAAiB,GAAjB,EAAqB,GAArB,EAAyB,GAAzB,EAA6B,GAA7B,EAAiC,GAAjC,EAAqC,GAArC,CAAtB;AACA,MAAMC,aAAa,GAAG,CAAC,IAAD,EAAM,GAAN,EAAU,IAAV,EAAe,GAAf,EAAmB,KAAnB,CAAtB;AACA,MAAMC,gBAAgB,GAAG,CAAC,GAAD,EAAK,GAAL,EAAS,GAAT,EAAa,GAAb,EAAiB,GAAjB,EAAqB,GAArB,CAAzB;;AAEA,SAASC,GAAT,GAAe;AAAA;;AAEb,QAAM,CAACC,WAAD,EAAcC,eAAd,IAAiCT,KAAK,CAACU,QAAN,EAAvC;AAEA,sBACE,QAAC,KAAD,CAAO,QAAP;AAAA,4BACE,QAAC,OAAD;AAAA;AAAA;AAAA;AAAA,YADF,eAEE,QAAC,UAAD;AAAA,iBACGL,aAAa,CAACM,GAAd,CAAkBC,YAAY,iBAC7B,QAAC,SAAD;AAA8B,QAAA,SAAS,EAAEA;AAAzC,SAAgBA,YAAhB;AAAA;AAAA;AAAA;AAAA,cADD,CADH,EAIGR,aAAa,CAACO,GAAd,CAAkBE,YAAY,iBAC7B,QAAC,SAAD;AAA8B,QAAA,SAAS,EAAEA;AAAzC,SAAgBA,YAAhB;AAAA;AAAA;AAAA;AAAA,cADD,CAJH,EAOGP,gBAAgB,CAACK,GAAjB,CAAqBG,eAAe,iBACnC,QAAC,SAAD;AAAiC,QAAA,SAAS,EAAEA;AAA5C,SAAgBA,eAAhB;AAAA;AAAA;AAAA;AAAA,cADD,CAPH;AAAA;AAAA;AAAA;AAAA;AAAA,YAFF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAgBD;;GApBQP,G;;KAAAA,G;AAsBT,eAAeA,GAAf","sourcesContent":["import React from 'react'\nimport { Display } from './Components/Display'\nimport { Calculator } from './Components/Calculator'\nimport { CalButton } from './Components/CalButton'\n\nconst numberButtons = ['0','1','2','3','4','5','6','7','8','9']\nconst actionButtons = ['CE','C','<-','.','-/+']\nconst operationButtons = ['=','-','+','/','*','%']\n\nfunction App() {\n\n  const [diplayState, setDisplayState] = React.useState()\n\n  return (\n    <React.Fragment>\n      <Display/>\n      <Calculator>\n        {actionButtons.map(actionButton => (\n          <CalButton key={actionButton} character={actionButton}/>\n        ))}\n        {numberButtons.map(numberButton => (\n          <CalButton key={numberButton} character={numberButton}/>\n        ))}\n        {operationButtons.map(operationButton => (\n          <CalButton key={operationButton} character={operationButton}/>\n        ))}\n      </Calculator>\n    </React.Fragment>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}